{"remainingRequest":"/Users/Josh/Desktop/OSU/CS 467/ParrotCrawl/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/Josh/Desktop/OSU/CS 467/ParrotCrawl/node_modules/angular-web_storage-service/bundles/angular-webstorage-service.es5.js","dependencies":[{"path":"/Users/Josh/Desktop/OSU/CS 467/ParrotCrawl/node_modules/angular-web_storage-service/bundles/angular-webstorage-service.es5.js","mtime":1533423791000},{"path":"/Users/Josh/Desktop/OSU/CS 467/ParrotCrawl/node_modules/cache-loader/dist/cjs.js","mtime":1532563616000},{"path":"/Users/Josh/Desktop/OSU/CS 467/ParrotCrawl/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1532563612000}],"contextDependencies":[],"result":["import { InjectionToken, NgModule } from '@angular/core';\n/**\n * An implementation of `StorageService` interface that uses an underlying (web) `Storage` object, such as `localStorage` and\n * `sessionStorage`, as backing data store. This class basically wraps the `Storage` object so it can be accessed through the\n * `StorageService` interface.\n */\nvar WebStorageService = /*@__PURE__*/ (function () {\n    /**\n     * Creates a new `WebStorageService` instance that uses the specified (web) storage object as underlying backing storage.\n     *\n     * @param storage Storage object which is to be wrapped in a class that implements the `StorageService` interface.\n     */\n    function WebStorageService(storage) {\n        this.storage = storage;\n    }\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. If no such entry exists or if the service for\n     * some reason is unable to fetch the value of the entry then `null` will be returned.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     Value of the entry that is identified by the specified key or `null` if the entry does not exist or cannot be loaded.\n     */\n    WebStorageService.prototype.get = function (key) {\n        try {\n            return JSON.parse(this.storage.getItem(key));\n        }\n        catch (error) {\n            return null;\n        }\n    };\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. Storing a value into the storage service will\n     * ensure that an equivalent of the value can be read back, i.e. the data and structure of the value will be the same. It, however, does\n     * not necessarily return the same value, i.e. the same reference.\n     *\n     * @param key   Identifier of the entry which is to be created or updated.\n     * @param value Value which is to be stored.\n     */\n    WebStorageService.prototype.set = function (key, value) {\n        this.storage.setItem(key, JSON.stringify(value));\n    };\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `null`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    WebStorageService.prototype.remove = function (key) {\n        this.storage.removeItem(key);\n    };\n    return WebStorageService;\n}());\n/**\n * Checks whether the specified (web) storage is available and functional. This might not be the case for older browsers. However even\n * certain browsers that do support the web storage API can, under some circumstances, have non functional storage objects. For example,\n * Safari is known to have `localStorage` and `sessionStorage` throw exceptions in private mode.\n *\n * @param storage Storage object which is to be tested for availability.\n */\nfunction isStorageAvailable(storage) {\n    // Check if storage is available.\n    if (!storage) {\n        return false;\n    }\n    // Check if the storage can actually be accessed.\n    try {\n        var now = Date.now();\n        var testItemKey = \"storage-test-entry-\" + now;\n        var testItemValue = \"storage-test-value-\" + now;\n        storage.setItem(testItemKey, testItemValue);\n        var retrievedItemValue = storage.getItem(testItemKey);\n        storage.removeItem(testItemKey);\n        return retrievedItemValue === testItemValue;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * A volatile `StorageService` implementation. This service guarantees that data stored will remain available as long as the application\n * instance is active. After the application is terminated all data will be lost.\n */\nvar InMemoryStorageService = /*@__PURE__*/ (function () {\n    function InMemoryStorageService() {\n        this.storage = new Map();\n    }\n    /**\n     * Retrieves the value stored for the entry that is associated with the specified key. If no such entry exists or if the service for\n     * some reason is unable to fetch the value of the entry then `null` will be returned.\n     *\n     * @param   key Identifier of the entry whose value is to be retrieved.\n     * @returns     Value of the entry that is identified by the specified key or `null` if the entry does not exist or cannot be loaded.\n     */\n    InMemoryStorageService.prototype.get = function (key) {\n        if (!this.storage.has(key)) {\n            return null;\n        }\n        return this.storage.get(key);\n    };\n    /**\n     * Creates or updates the entry identified by the specified key with the given value. Storing a value into the storage service will\n     * ensure that an equivalent of the value can be read back, i.e. the data and structure of the value will be the same. It, however, does\n     * not necessarily return the same value, i.e. the same reference.\n     *\n     * @param key   Identifier of the entry which is to be created or updated.\n     * @param value Value which is to be stored.\n     */\n    InMemoryStorageService.prototype.set = function (key, value) {\n        this.storage.set(key, value);\n    };\n    /**\n     * Removes the entry that is identified by the specified key. Attempting to remove an entry for an unknown key will have no effect.\n     * Attempting to retrieve an entry via the `get` method after it has been removed will result in `null`.\n     *\n     * @param key Identifier of the entry which is to be removed.\n     */\n    InMemoryStorageService.prototype.remove = function (key) {\n        this.storage.delete(key);\n    };\n    return InMemoryStorageService;\n}());\n/** Injection token for the session storage service. */\nvar SESSION_STORAGE = new InjectionToken('SESSION_STORAGE');\n/** Injection token for the local storage service. */\nvar LOCAL_STORAGE = new InjectionToken('LOCAL_STORAGE');\nfunction sessionStorageFactory() {\n    if (!isStorageAvailable(sessionStorage)) {\n        return new InMemoryStorageService();\n    }\n    return new WebStorageService(sessionStorage);\n}\nfunction localStorageFactory() {\n    if (!isStorageAvailable(localStorage)) {\n        return new InMemoryStorageService();\n    }\n    return new WebStorageService(localStorage);\n}\nvar StorageServiceModule = /*@__PURE__*/ (function () {\n    function StorageServiceModule() {\n    }\n    return StorageServiceModule;\n}());\nexport { WebStorageService, isStorageAvailable, InMemoryStorageService, SESSION_STORAGE, LOCAL_STORAGE, sessionStorageFactory, localStorageFactory, StorageServiceModule };\n",null]}